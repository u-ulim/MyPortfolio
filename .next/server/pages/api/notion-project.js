"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/notion-project";
exports.ids = ["pages/api/notion-project"];
exports.modules = {

/***/ "@notionhq/client":
/*!***********************************!*\
  !*** external "@notionhq/client" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("@notionhq/client");

/***/ }),

/***/ "(api)/./pages/api/notion-project.js":
/*!*************************************!*\
  !*** ./pages/api/notion-project.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _notionhq_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @notionhq/client */ \"@notionhq/client\");\n/* harmony import */ var _notionhq_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_notionhq_client__WEBPACK_IMPORTED_MODULE_0__);\n\n// Notion API 클라이언트 초기화\nconst notion = new _notionhq_client__WEBPACK_IMPORTED_MODULE_0__.Client({\n    auth: process.env.NOTION_API_KEY\n});\nasync function handler(req, res) {\n    try {\n        // 요청에서 파라미터 추출\n        const { name  } = req.query;\n        if (!name) {\n            return res.status(400).json({\n                success: false,\n                message: \"프로젝트 이름(name)이 필요합니다\"\n            });\n        }\n        // 데이터베이스에서 특정 이름의 프로젝트 찾기\n        const response = await notion.databases.query({\n            database_id: process.env.NOTION_DATABASE_ID,\n            filter: {\n                property: \"Name\",\n                title: {\n                    equals: name\n                }\n            }\n        });\n        // 결과가 없는 경우\n        if (response.results.length === 0) {\n            return res.status(404).json({\n                success: false,\n                message: `\"${name}\" 프로젝트를 찾을 수 없습니다`\n            });\n        }\n        // 첫 번째 결과를 가져옴\n        const page = response.results[0];\n        const properties = page.properties;\n        const projectData = {};\n        // 각 속성 타입에 따라 값 추출\n        for(const key in properties){\n            const prop = properties[key];\n            switch(prop.type){\n                case \"title\":\n                    projectData[key] = prop.title[0]?.plain_text || \"\";\n                    break;\n                case \"rich_text\":\n                    projectData[key] = prop.rich_text[0]?.plain_text || \"\";\n                    break;\n                case \"url\":\n                    projectData[key] = prop.url || \"\";\n                    break;\n                case \"files\":\n                    if (prop.files.length > 0) {\n                        projectData[key] = prop.files.map((file)=>({\n                                name: file.name,\n                                url: file.file?.url || file.external?.url || \"\"\n                            }));\n                    } else {\n                        projectData[key] = [];\n                    }\n                    break;\n                case \"multi_select\":\n                    projectData[key] = prop.multi_select.map((item)=>item.name);\n                    break;\n                default:\n                    projectData[key] = `[${prop.type} 형식]`;\n            }\n        }\n        return res.status(200).json({\n            success: true,\n            project: projectData,\n            // 원본 데이터도 포함\n            rawData: page\n        });\n    } catch (error) {\n        console.error(\"Notion API Error:\", error);\n        return res.status(500).json({\n            success: false,\n            message: \"Error fetching project from Notion\",\n            error: error.message\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bEMsSUFBSUcsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztZQUMxQkMsU0FBUyxLQUFLO1lBQ2RDLFNBQVM7WUFDVDRCLE9BQU9BLE1BQU01QixPQUFPO1FBQ3RCO0lBQ0Y7QUFDRixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWV0YXZlcnNlMTMvLi9wYWdlcy9hcGkvbm90aW9uLXByb2plY3QuanM/YTg1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbGllbnQgfSBmcm9tIFwiQG5vdGlvbmhxL2NsaWVudFwiO1xyXG5cclxuLy8gTm90aW9uIEFQSSDtgbTrnbzsnbTslrjtirgg7LSI6riw7ZmUXHJcbmNvbnN0IG5vdGlvbiA9IG5ldyBDbGllbnQoe1xyXG4gIGF1dGg6IHByb2Nlc3MuZW52Lk5PVElPTl9BUElfS0VZLFxyXG59KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIocmVxLCByZXMpIHtcclxuICB0cnkge1xyXG4gICAgLy8g7JqU7LKt7JeQ7IScIO2MjOudvOuvuO2EsCDstpTstpxcclxuICAgIGNvbnN0IHsgbmFtZSB9ID0gcmVxLnF1ZXJ5O1xyXG5cclxuICAgIGlmICghbmFtZSkge1xyXG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgIG1lc3NhZ2U6IFwi7ZSE66Gc7KCd7Yq4IOydtOumhChuYW1lKeydtCDtlYTsmpTtlanri4jri6RcIixcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g642w7J207YSw67Kg7J207Iqk7JeQ7IScIO2KueyglSDsnbTrpoTsnZgg7ZSE66Gc7KCd7Yq4IOywvuq4sFxyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBub3Rpb24uZGF0YWJhc2VzLnF1ZXJ5KHtcclxuICAgICAgZGF0YWJhc2VfaWQ6IHByb2Nlc3MuZW52Lk5PVElPTl9EQVRBQkFTRV9JRCxcclxuICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgcHJvcGVydHk6IFwiTmFtZVwiLCAvLyBOb3Rpb27snZgg7KCc66qpIOyGjeyEsSDsnbTrpoRcclxuICAgICAgICB0aXRsZToge1xyXG4gICAgICAgICAgZXF1YWxzOiBuYW1lLCAvLyDsoJXtmZXtnogg7J287LmY7ZWY64qUIOydtOumhCDssL7quLBcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8g6rKw6rO86rCAIOyXhuuKlCDqsr3smrBcclxuICAgIGlmIChyZXNwb25zZS5yZXN1bHRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oe1xyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgIG1lc3NhZ2U6IGBcIiR7bmFtZX1cIiDtlITroZzsoJ3tirjrpbwg7LC+7J2EIOyImCDsl4bsirXri4jri6RgLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDssqsg67KI7Ke4IOqysOqzvOulvCDqsIDsoLjsmLRcclxuICAgIGNvbnN0IHBhZ2UgPSByZXNwb25zZS5yZXN1bHRzWzBdO1xyXG4gICAgY29uc3QgcHJvcGVydGllcyA9IHBhZ2UucHJvcGVydGllcztcclxuICAgIGNvbnN0IHByb2plY3REYXRhID0ge307XHJcblxyXG4gICAgLy8g6rCBIOyGjeyEsSDtg4DsnoXsl5Ag65Sw6528IOqwkiDstpTstpxcclxuICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BlcnRpZXMpIHtcclxuICAgICAgY29uc3QgcHJvcCA9IHByb3BlcnRpZXNba2V5XTtcclxuXHJcbiAgICAgIHN3aXRjaCAocHJvcC50eXBlKSB7XHJcbiAgICAgICAgY2FzZSBcInRpdGxlXCI6XHJcbiAgICAgICAgICBwcm9qZWN0RGF0YVtrZXldID0gcHJvcC50aXRsZVswXT8ucGxhaW5fdGV4dCB8fCBcIlwiO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcInJpY2hfdGV4dFwiOlxyXG4gICAgICAgICAgcHJvamVjdERhdGFba2V5XSA9IHByb3AucmljaF90ZXh0WzBdPy5wbGFpbl90ZXh0IHx8IFwiXCI7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwidXJsXCI6XHJcbiAgICAgICAgICBwcm9qZWN0RGF0YVtrZXldID0gcHJvcC51cmwgfHwgXCJcIjtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJmaWxlc1wiOlxyXG4gICAgICAgICAgaWYgKHByb3AuZmlsZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBwcm9qZWN0RGF0YVtrZXldID0gcHJvcC5maWxlcy5tYXAoKGZpbGUpID0+ICh7XHJcbiAgICAgICAgICAgICAgbmFtZTogZmlsZS5uYW1lLFxyXG4gICAgICAgICAgICAgIHVybDogZmlsZS5maWxlPy51cmwgfHwgZmlsZS5leHRlcm5hbD8udXJsIHx8IFwiXCIsXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHByb2plY3REYXRhW2tleV0gPSBbXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJtdWx0aV9zZWxlY3RcIjpcclxuICAgICAgICAgIHByb2plY3REYXRhW2tleV0gPSBwcm9wLm11bHRpX3NlbGVjdC5tYXAoKGl0ZW0pID0+IGl0ZW0ubmFtZSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgcHJvamVjdERhdGFba2V5XSA9IGBbJHtwcm9wLnR5cGV9IO2YleyLnV1gO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcclxuICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgcHJvamVjdDogcHJvamVjdERhdGEsXHJcbiAgICAgIC8vIOybkOuzuCDrjbDsnbTthLDrj4Qg7Y+s7ZWoXHJcbiAgICAgIHJhd0RhdGE6IHBhZ2UsXHJcbiAgICB9KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihcIk5vdGlvbiBBUEkgRXJyb3I6XCIsIGVycm9yKTtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7XHJcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICBtZXNzYWdlOiBcIkVycm9yIGZldGNoaW5nIHByb2plY3QgZnJvbSBOb3Rpb25cIixcclxuICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2UsXHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIkNsaWVudCIsIm5vdGlvbiIsImF1dGgiLCJwcm9jZXNzIiwiZW52IiwiTk9USU9OX0FQSV9LRVkiLCJoYW5kbGVyIiwicmVxIiwicmVzIiwibmFtZSIsInF1ZXJ5Iiwic3RhdHVzIiwianNvbiIsInN1Y2Nlc3MiLCJtZXNzYWdlIiwicmVzcG9uc2UiLCJkYXRhYmFzZXMiLCJkYXRhYmFzZV9pZCIsIk5PVElPTl9EQVRBQkFTRV9JRCIsImZpbHRlciIsInByb3BlcnR5IiwidGl0bGUiLCJlcXVhbHMiLCJyZXN1bHRzIiwibGVuZ3RoIiwicGFnZSIsInByb3BlcnRpZXMiLCJwcm9qZWN0RGF0YSIsImtleSIsInByb3AiLCJ0eXBlIiwicGxhaW5fdGV4dCIsInJpY2hfdGV4dCIsInVybCIsImZpbGVzIiwibWFwIiwiZmlsZSIsImV4dGVybmFsIiwibXVsdGlfc2VsZWN0IiwiaXRlbSIsInByb2plY3QiLCJyYXdEYXRhIiwiZXJyb3IiLCJjb25zb2xlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./pages/api/notion-project.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/notion-project.js"));
module.exports = __webpack_exports__;

})();